Chapter Getting started with Ansible 
Ansible and Infrastructure Management On snowflakes and shell scripts
Many developers and system administrators manage servers by logging into them via SSH making changes, and logging off. Some of these changes would be documented,some would not. If an admin needed to make the same change to many servers for example, changing one value in a config file. the admin would manually log into each server and repeatedly make this change.
If there were only one or two changes in the course of a servers lifetime and if the server were extremely simple running only one process, with one configuration, and a very simple firewall, and if every change were thoroughly documented, this process wouldnt be a problem.
But for almost every company in existence, servers are more complex most run tens, sometimes hundreds of different applications. Most servers have complicated firewalls and dozens of tweaked configuration files. And even with change documentation, the manual process usually results in some servers or some steps being forgaotten.
If the admins at these companies wanted to set up a new server exactly like one that is currently running, they would need to spend a good deal of time going through all of the installed packages, documenting configurations, versions, and settings and they would spend a lot of unnecessary time manualyy reinstallung, updating, and tweaking everything to get the new server to run close to how the old server did.
Some admins may use shell scripts to reach some level of sanity, but Ive yet to see a complex shell script that hangles all edge cases correctly while synchronizing multiple servers configuration and deploying new code.
Configuration management
Lucky for you, there are tools to help you avoid having these snowflake servers servers that are uniquely configured and impossible to recreate from scratch because they were hand configured without documentation. Tools like CFEngine, Puppet and Chef became very popular in the mid to late.
