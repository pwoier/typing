Managing this virtual server is extremely easy: vagrant halt will shut down the VM, vagrant up will bring it back up, and vagrant destroy will completely delete the machine from VirtualBox. A simple vagrant up again will re-create it from the base box you originally downloaded.
Now that you have a running server, you can use it just like you would any other server, and you can connect via SSH. To connect, enter vagrant ssh from the folder where the Vagrantfile is located. If you want to connect manually, or connect from another application, enter vagrant ssh-config to get the required SSH details.
Using Ansible with Vagrant
Vagrant's ability to bring up preconfigured boxes is convenient on its own, but you could do similar things with the same efficiency using VirtualBox's or VMWare's or Parallels GUI. Vagrant has some other tricks up its sleeve.
Network interface manageent You can forward ports to a VM, share the public network connection, or use privae networking for inter VM and host only communication.
Multi machine management Vagrant is able to configure control multiple VMx within one Vagrantfile. This is important because, as stated in the documentation, Historically, running complex environments was done by flattening them onto a single machine. The problem with that is that it is an inaccurate model of the production setup, which behaves far differently.
Provisioning When running vagrant up the first time, Vagrant automatically provisions the newly minted VM using whatever provisioner you have configured in the Vagrantfile. You can also run vagrant provision after the VM has been created to explicitly run the provisioner again.
