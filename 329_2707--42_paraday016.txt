This is convenient, but it's not safe to store the API key in plain text. Even when running the playbook locally on an access restricted computer, secrete should be encrypted. If youre running the playbook via a central server e.g. using Ansible Tower or Jenkins, or if you have this playbook in a shared repository, its even more important. You may follow best practices for physical and OS security, but can you guarantee every developer and sysadmin who has access to this file does the same
For the best security, use Ansible Vault to encrypt the file. If you ever checked the original file into version control, its also a good time to expire the old key and generate a new one, since the old key is part of the plaintext history of you project
To encrypt the file with Vault, run
Enter a secure password for the file, and Ansible will encrypt it. If you open the file now, you should see something like
After supplying the password, Ansible decrypts the vault in memory and runs the playbook with the decrypted data.
You can edit the encrypted file with ansible vault edit. You can also rekey a file change its password, create a new file, view an existing file, or decrypt a file. All these commands work with one or multiple files e.g. ansible vault create x.yml z.yml
For convenience, or for automated playbook runs e.g. on a continuous integration server, you can supply vault passwords via a password file. Just like secure keys in your ssh folder, you should treat these files carefully never check them into source control, and set strict permissions e.g. so only you can read or write this file. Create the file ansible vault pass.txt with your password in it, set permissions to, and tell Ansible the location of the file when you run the playbook.
