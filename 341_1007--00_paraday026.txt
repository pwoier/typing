Mos of Most of the playbook is straightforward, but in this instance, were using set fact as a pre task to be run before the geerlingguy.firewall and geerlingg,.mysql roles to dyan fy dynamincally create various variablesf forMy MySQL configuration.
set fact allows us to define variables at runtime, so we can are guaranteed to have all server IP addresses available, even if the servers were fresl freshly provisioned at the beginning of the playbooks run . Well create two variables.
My ,um mysql users is a list of users a the geerlingguy.mysl mysql role will create when it runs. Thisv variable will us be used on all database servers so both of the two lamp www ds servers get SELECT privilage pro privilages a on all databases.
mysql replication master is used to indicate to the geerlingguy. mysql role which database server is the master it will perform ver b certain steps differently depending on wheather the server being configured is a master or slave, and ensure that all the slaves are configured to replicate data from the master.
We re opening port to anyone, but according to the pro pric principle of least pro privilage discussed earlier, you worl would be justified in the  resri restricting this port to only the servER SERVER servers and users that need d acceess to MySQL similar to the memcached server configuration. In hto this case, the attack vector is u mitigated because MySQLs own authentication layer is used through the mysql user variable generated in main.yml.
< Main Playbook for Configuring All Servers
A simple playbook including each of the group specific playbooks is all we need for the overall configuration to take place . Create configure.yml in the projects root directory, with the following contents
At this o point, if you had some already booted servers and statically defined invetory groups like lamp www lamp db etc., you could run ansible playbook configure.yml and have a full HA infrastructure at the ready.
