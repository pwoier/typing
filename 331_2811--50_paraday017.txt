After lot of experience building playbooks, roles, and managing inventories, youll likely find the right mix of variable definition for your needs, but there are a few general things that will mitigate any pain in setting and overriding variables on a per play, per host, or per run basis.
Roles to be discussed in the next chapter should provide sane default values via the roles defaults variables. These variables will be the fallback in case the variable is not defined anywhere else in the chain.
Playbooks should rarely define variables e.g. via set fact, but rather, variables should be defined either in included vars files or less often, via inventory.
Only truly host or group specific variables should be defined in host or group inventories.
Dynamic and static inventory sources should contain a minimum of variables, especially as these variables are often less visible to those maintaining a particular playbook.
Command line variables e should be avoided when possible. One of the main use cases is when doing local testing or running one off playbooks where you arent worried about the maintainablity or idempotence of the tasks youre running.
If/then/when - Conditionals
Many tasks need only be run in certain circumstances. Some tasks use modules with buily in idempotence as is the case when ensuring a yum or apt package is installed, and you usually dont need to define further conditional behaviors for these tasks.
However, there are many tasks especially those using Ansibles command or shell modules which require further input as to when theyre supposed to run, whether theyve changed anything after theyve been run, or when theyve failed to run.
Well cover all the main conditionals behaviors you can apply to Ansible tasks, as well as how you can tell Ansible when a play has done something to a server or failed.
Jinja Expressions, Save the above as inventory.py in the same folder as the Vagrantfile you created earlier make sure you booted the two VMs with vagrant up and make the file executable chmod x inventory.py. Run the inventory script manually to verify it returns the proper JSON response when run with list.
Summary
From the most basic infrastructure consisting of one server to a multi tenant, dynamic infrastructure with thousands of them, Ansible offers many options for describing your servers and overriding playbook and role variables for specific hosts or groups. With Ansibles flexible in inventory system. you should be able to describe all your servers, however theyre managed and whereever they re hosted.The above Vagrantfile defines four VMs with MB of RAM and a unique hostname and IP address defined by the boxes variable. Our Node.js app doesnt require much in the way of processing power or memory.
In the provision section of the playbook, we told Vagrant to provision the all the VMs with Ansible, using the inventory file inventory, and the playbook playbooks main.yml. Create these two files in the same folder as your Vagrantfile
Inside the main.yml playbook, well call out two seperate playbooks one for the initial provisioning installing Node.js API app is present and running.
This playbook runs on all the servers defined in our inventory file, and runs two roles on the servers geerlingguy.firewall which installs and configures a firewall, in this case opening ports for SSH and for our app and geerlinguy.nodejs which installs Nodejs, NPM, and forever, which we ll use to run our app as a daemon.
Since were using two roles from Ansible Galaxy, its best practice to also include those roles in a requirements file so CI tools and others using the playbook can install all the required roles.
